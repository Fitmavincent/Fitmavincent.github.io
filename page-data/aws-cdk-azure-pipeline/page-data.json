{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-cdk-azure-pipeline/","result":{"data":{"site":{"siteMetadata":{"title":"Vince"}},"markdownRemark":{"id":"90f3042c-9468-51ad-b933-d56739d8b93f","excerpt":"Lesson learn with AWS CDK, Azure Pipeline Intro As per requested at work to build a modulised, scalable infrastructure, I’ve been messing around the AWS CDK. It…","html":"<h1>Lesson learn with AWS CDK, Azure Pipeline</h1>\n<h2>Intro</h2>\n<p>As per requested at work to build a modulised, scalable infrastructure, I’ve been messing around the AWS CDK. It’s quite a powerful tool to provision AWS infrastructure without touching the stupid <code class=\"language-text\">yml</code> file <strong><em>(Ya, it’s you <code class=\"language-text\">CloudFormation</code>)</em>.</strong> However the process hasn’t been smooth. Therefore, in this post, I just want to write down and summarise what I come across. <strong>This is not a tutorial</strong>. For that you got a great blog from <code class=\"language-text\">Carlos</code> <a href=\"https://www.mytechramblings.com/posts/provisioning-aws-resources-using-cdk-azure-devops/\">Provisioning resources on AWS using AWS CDK and Azure DevOps Pipelines</a>.</p>\n<hr>\n<h2>TL;DR</h2>\n<p>Simply put:</p>\n<blockquote>\n<p>This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2.</p>\n</blockquote>\n<hr>\n<h2>The lesson</h2>\n<p>Let’s look at all the errors…</p>\n<p><img src=\"/4ab066c82ffb6f3fbd418d8b595902f6/massive-failure.png\" alt=\"Massive Failure\"></p>\n<p>The error occured when the build is executing a <code class=\"language-text\">npm run build</code> after <code class=\"language-text\">npm install</code>.</p>\n<p><img src=\"/e74d0116244c8a12c7df70236008c517/dependency-error.png\" alt=\"fisrt error\"></p>\n<p>The “Cannot find module” should’ve trigger some alarm bells in my head regarding the <code class=\"language-text\">npm install</code>. Yet I went a big route to debug, look for <code class=\"language-text\">node_modules</code>, whether that exists or not etc.</p>\n<p>And this line <code class=\"language-text\">This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!</code> gives me a big impression that the <code class=\"language-text\">npm install</code> is totally fine.</p>\n<p>Plus, <code class=\"language-text\">AWS CDK</code> has been giving me problems. When they got a new release, I need to go the <code class=\"language-text\">package.json</code> to upgrade all my <code class=\"language-text\">cdk</code> modules, otherwise, builds fail, nothing works.</p>\n<p>After a while, I still could not have any clue of what is going on, I tried run this thing on my <code class=\"language-text\">WSL</code> since it’s running on the Linux box, as my friend suggested. But the result is everything fine.</p>\n<h3>So what went wrong…</h3>\n<p><br>\nFinally, I noticed one of my debug command regarding my NPM VERSION</p>\n<p>In my build script, I did put in a <code class=\"language-text\">NodeTool@0</code>, which is provided by Azure Pipeline. And I specify the verison to <code class=\"language-text\">16.x</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> NodeTool@0\r\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span> \r\n      <span class=\"token key atrule\">versionSpec</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'16.x'</span>\r\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Install NodeJS\"</span></code></pre></div>\n<p><img src=\"/a46ca1c0b6e23ed93427ea12aa1c2679/node-tools.png\" alt=\"node-tools\"></p>\n<p>Yet after I check my node version, it’s still at 14.</p>\n<p><img src=\"/6bf4623c5dcae0d93b1a7b45f2df9d3b/node-version.png\" alt=\"node-version\"></p>\n<p>I started getting frustrated, until I found this: <a href=\"https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md\">Ubuntu2004-README.md</a> from <a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&#x26;tabs=yaml\">MS Hosted agent</a>.</p>\n<p>The <code class=\"language-text\">ubuntu-latest</code> image that I’m using got pre-installed <code class=\"language-text\">NodeJS 14.x</code>. And the <code class=\"language-text\">NodeTool@0</code> does not change anything for the build agent.</p>\n<p>And this <a href=\"https://github.com/aws/aws-cdk/issues/13541\">aws-cdk issue</a> confirms my error was on the difference of my <code class=\"language-text\">npm</code> version on build agent and my local npm version that generated my <code class=\"language-text\">package-lock.json</code>.</p>\n<p>Shamail (from the above github issue) has a good enough explanation of what happend:</p>\n<blockquote>\n<p>“My issue was due to the default codebuild image using npm v6.x instead of npm v7.x, which i’m using locally and which produces a lockfileVersion:2 instead of lockfileVersion:1 package-lock.json file. So when codebuild pulls the code from my repo, it’s getting a package-lock.json that isn’t compatible with npm v6.x but it tries to use it anyway without throwing a mismatch error.”</p>\n</blockquote>\n<p><br>\nOnce I done a force delete of my <code class=\"language-text\">package-lock.json</code>, my problem resovled.</p>","frontmatter":{"title":"AWS CDK Azure Pipeline","date":"May 11, 2021","description":"AWS CDK deploy pipeline with Azure DevOps"}}},"pageContext":{"slug":"/aws-cdk-azure-pipeline/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":{"fields":{"slug":"/awesome-doco/"},"frontmatter":{"title":"AWESOME Doco"}}}},"staticQueryHashes":["148235104","2841359383","3544064463"],"slicesMap":{}}